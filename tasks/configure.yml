---
- name: Create user
  user:
    name: ubuntu

- name: Create teleport variable directory
  become: yes
  file:
    path: "{{ teleport_data_dir }}"
    owner: "ubuntu"
    group: "ubuntu"
    state: directory

- name: Creating teleport config directory
  become: yes
  file:
    path: "{{ teleport_config_dir }}"
    owner: "ubuntu"
    group: "ubuntu"
    state: directory

- name: Create teleport ssl directory
  become: yes
  file:
    path: "{{ teleport_ssl_dir }}"
    owner: "ubuntu"
    group: "ubuntu"
    state: directory

- name: Generating join tokens
  when: inventory_hostname == groups['teleport_auth'][0]
  become: yes
  no_log: yes
  command: tctl nodes add --ttl=10m --roles="auth,proxy,node"
  register: tctl_result

# Uses a Perl compatible regex (-P) for positive lookbehind
- name: Grabbing token
  when: inventory_hostname == groups['teleport_auth'][0]
  no_log: yes
  shell: echo "{{ tctl_result.stdout }}" | grep -oP "(?<=--token=)[A-Za-z0-9]*"
  register: token

- name: Saving token
  when: inventory_hostname == groups['teleport_auth'][0]
  no_log: yes
  set_fact:
    "join_token": "{{ token.stdout }}"

- name: Grabbing CA pin
  when: inventory_hostname == groups['teleport_auth'][0]
  no_log: yes
  shell: echo "{{ tctl_result.stdout }}" | grep -oP "(?<=--ca-pin=)[A-Za-z0-9:]*"
  register: ca_pin

- name: Saving CA pin
  when: inventory_hostname == groups['teleport_auth'][0]
  no_log: yes
  set_fact:
    "ca_pin": "{{ ca_pin.stdout }}"

- name: Creating teleport config
  become: yes
  no_log: yes
  template:
    src: "teleport.yml.j2"
    dest: "{{ teleport_config_path }}"
    force: yes
    owner: "ubuntu"
    group: "ubuntu"
    mode: "u=r"
  notify: reload teleport

- name: Creating teleport unit file
  become: true
  template:
    src: "teleport.service.j2"
    dest: "{{ teleport_service_path }}"
    force: true
    owner: "ubuntu"
    group: "ubuntu"
    mode: "u=rw,g=rw,o=r"
  notify: restart teleport
